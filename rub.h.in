#ifndef __SPLIT__H
#define __SPLIT__H

#define _GNU_SOURCE

#include <stddef.h>
#include <event2/http.h>
#include <syslog.h>

#include <uv.h>

#include "http-parser/http_parser.h"

void route_request_cb( struct evhttp_request *req, void *arg );
int config_get_int( const char *name );
const char * config_get_str( const char *name );
char * source_file( const char *fpath );
const void * config_get_obj( const char *name );

struct bt {
  char *s;
  int len;
  int alen;
};


int bnew( struct bt *buf, char *str );
void bfree( struct bt *buf );
void bappend_vprintf( struct bt *buf, const char *format, va_list args );
void bappend_printf( struct bt *buf, const char *format, ... );

struct kv_t {
  char *key;
  char *value;

  struct kv_t *next;
};

struct client_t {
  uv_tcp_t tcp;
  http_parser parser;
  uv_write_t write_req;
  uv_buf_t resbuf;

  struct bt outs;
  struct kv_t *headers;
  char *url;
};

struct rub_t {
  struct client_t *client;

  struct evhttp_request *req;
  struct evbuffer *evb;
  struct evkeyvalq *post_data;
  struct evkeyvalq *query_data;
  int a;
};

struct table_entry {
  const char *extension;
  const char *content_type;
};

struct config_t {
  const char *doc_root;
  const char *script_root;
  const char *address;
  unsigned short port;
  int display_error;
};

struct rub_t *rub_get_request();
void route_request( struct client_t *client, void *arg );


const char * log_format( const char *fmt, struct evhttp_request *req,
                         int response_size );

#define dprintf(...) printf(__VA_ARGS__)
#define MAX_ENT 32
#define MAX_LINE 256
#define MAXNAME 16

struct line_t {
  const char *line;
  struct line_t *next;
};

struct entity_t {
  const char *name;
  struct entity_t *next;
  struct line_t *line;
  struct line_t *curr;
};


struct entity_t * first_entity();
void scpy( char *dst, const char *src, size_t dsize, int max );

/** 
 *  Platform dependent impl to get source code for program
 */
char *readprog( const char *filepath );
struct entity_t * first_entity();
struct entity_t * new_entity();
struct line_t * new_line();
struct line_t * first_line();

#endif
